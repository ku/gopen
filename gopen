#!/usr/bin/env ruby

require 'pp'

ENV['GIT'] = "git"

class Repo
  def self.parse(url, branch)

    if url.match(/gist.github.com/)
      Gist.new(url, branch)
    elsif m = url.match(/^(git\+ssh:\/\/)?(git@github.com\b.+)/)
      Github.new(m[2], branch)
    elsif url.match(/bitbucket.org/)
      Bitbucket.new(url, branch)
    else
      nil
    end
  end

  def build_url(commit)
    url = [ self.root(), @organization_name, @repository_name ].join('/')
  end

  def open(commit)
    url = self.build_url(commit)

    `open "#{url}"`
  end
end

class Github < Repo
  def initialize(url, branch)
    @branch = branch
    (_, @organization_name, @repository_name) = url.match(/github.com[:\/]([-\w]+)\/([-\w]+)/).to_a
  end

  def root
    "https://github.com"
  end

  def build_url(commit)
    if commit
      [super, 'commit', commit ].join('/')
    else
      [super, 'tree', @branch ].join('/')
    end
  end
end
class Gist < Github
  def initialize(url, branch)
    @branch = branch
    (@repository_name, @organization_name) = url.split('/').reverse
  end
  def root
    "https://gist.github.com"
  end
  def build_url(commit)
    if commit
      [root, @repository_name.split('.').shift, "revisions#diff-#{commit}"].join('/')
    else
      [root, @repository_name].join('/')
    end
  end
end
class Bitbucket < Repo
  def initialize(url)
    (@repository_name, @organization_name) = url.gsub(/\.git$/, '').split('/').reverse
  end
  def root
    "https://bitbucket.org"
  end
  def build_url(commit)
    if commit
      [super, 'commits', commit].join('/')
    else
      super
    end
  end
end

class Main
  def fetch_url
    lines = `GIT remote show origin -n`
    line = lines.split("\n").find {|line| line.match /Fetch URL/ }
    line.split(': ').pop()
  end

  def fetch_current_branch
    lines = `GIT branch`
    line = lines.split("\n").find {|line| line.match /^\* / }
    branch = line.split(' ', 2).pop()
    pp branch
    branch.match(/^\w/) ? branch : 'master'
  end

  def run(args)
    commit = args.shift
    url = self.fetch_url
    branch = fetch_current_branch

    repo = Repo.parse(url, branch)
    repo.open(commit)
  end

end

Main.new.run(ARGV)
