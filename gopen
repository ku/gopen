#!/usr/bin/env ruby

require 'pp'

ENV['GIT'] = "git"

class Repo
  def self.parse(url)
    branch = fetch_current_branch

    if url.match(/gist.github.com/)
      Gist.new(url, branch)
    elsif m = url.match(/^(git@|ssh:\/\/git@|git:git@|https:\/\/)(github.com\b.+)/)
      Github.new(m[2], branch)
    elsif url.match(/bitbucket.org/)
      Bitbucket.new(url, branch)
    elsif m = url.match(/^(github.com\b.+)/)
      Github.new(m[1], branch)
    else
      raise "repo #{ url } does not match any patterns"
    end
  end

  def self.fetch_current_branch
    lines = `git branch`
    line = lines.split("\n").find {|line| line.match /^\* / }
    branch = line.split(' ', 2).pop()
    branch.match(/^\w/) ? branch : 'main'
  end

  def build_url(commit)
    url = [ self.root(), @organization_name, @repository_name ].join('/')
  end

  def open(commit)
    url = self.build_url(commit)

    `open "#{url}"`
  end
end

class Github < Repo
  def initialize(url, branch)
    @branch = branch
    (_, @organization_name, @repository_name) = url.gsub(/\.git$/, '').match(/github.com[:\/]([-\w]+)\/([-\w\.]+)/).to_a
  end

  def root
    "https://github.com"
  end

  def build_url(commit)
    if commit
      [super, 'commit', commit ].join('/')
    elsif @branch.nil?
      [super].join('/')
    else
      [super, 'tree', @branch ].join('/')
    end
  end
end
class Gist < Github
  def initialize(url, branch)
    @branch = branch
    (@repository_name, @organization_name) = url.split('/').reverse
  end
  def root
    "https://gist.github.com"
  end
  def build_url(commit)
    if commit
      [root, @repository_name.split('.').shift, "revisions#diff-#{commit}"].join('/')
    else
      [root, @repository_name].join('/')
    end
  end
end
class Bitbucket < Repo
  def initialize(url, branch)
    (@repository_name, @organization_name) = url.gsub(/\.git$/, '').split('/').reverse
  end
  def root
    "https://bitbucket.org"
  end
  def build_url(commit)
    if commit
      [super, 'commits', commit].join('/')
    else
      super
    end
  end
end

class Main
  def fetch_url
    if File.exists? '.git'
      lines = `git remote show origin -n`
      line = lines.split("\n").find {|line| line.match /Fetch URL/ }
      line.split(': ').pop()
    else
      path = Dir.pwd # get current directory path
      github_dir = "#{File::SEPARATOR}github.com#{File::SEPARATOR}" # set the directory name


      if path.include?(github_dir) # check if the directory name is included
        m = path.match(%r{github.com/[-\w]+/[-\w]+})
        m[0]
      end
    end
  end


  def run(args)
    commit = args.shift
    url = self.fetch_url

    repo = Repo.parse(url)
    repo.open(commit)
  end

end

Main.new.run(ARGV)
